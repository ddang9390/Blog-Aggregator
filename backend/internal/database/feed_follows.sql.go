// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: feed_follows.sql

package database

import (
	"context"
)

const createFeedFollows = `-- name: CreateFeedFollows :one
INSERT INTO feed_follows (feed_id, user_id)
VALUES ($1, $2)
RETURNING feed_id, user_id
`

type CreateFeedFollowsParams struct {
	FeedID string
	UserID string
}

func (q *Queries) CreateFeedFollows(ctx context.Context, arg CreateFeedFollowsParams) (FeedFollow, error) {
	row := q.db.QueryRowContext(ctx, createFeedFollows, arg.FeedID, arg.UserID)
	var i FeedFollow
	err := row.Scan(&i.FeedID, &i.UserID)
	return i, err
}

const deleteFeedFollow = `-- name: DeleteFeedFollow :exec
DELETE FROM feed_follows
WHERE feed_follows.feed_id = $1
`

func (q *Queries) DeleteFeedFollow(ctx context.Context, feedID string) error {
	_, err := q.db.ExecContext(ctx, deleteFeedFollow, feedID)
	return err
}

const getAllFeedFollowsForUser = `-- name: GetAllFeedFollowsForUser :many
SELECT feed_id, user_id FROM feed_follows
WHERE feed_follows.user_id = $1
`

func (q *Queries) GetAllFeedFollowsForUser(ctx context.Context, userID string) ([]FeedFollow, error) {
	rows, err := q.db.QueryContext(ctx, getAllFeedFollowsForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FeedFollow
	for rows.Next() {
		var i FeedFollow
		if err := rows.Scan(&i.FeedID, &i.UserID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
