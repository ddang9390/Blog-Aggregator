// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: sessions.sql

package database

import (
	"context"
	"time"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions(session_id, user_id, created_at, expires_at)
VALUES ($1, $2, $3, $4)
RETURNING session_id, user_id, created_at, expires_at
`

type CreateSessionParams struct {
	SessionID string
	UserID    string
	CreatedAt time.Time
	ExpiresAt time.Time
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession,
		arg.SessionID,
		arg.UserID,
		arg.CreatedAt,
		arg.ExpiresAt,
	)
	var i Session
	err := row.Scan(
		&i.SessionID,
		&i.UserID,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions 
WHERE session_id = $1
`

func (q *Queries) DeleteSession(ctx context.Context, sessionID string) error {
	_, err := q.db.ExecContext(ctx, deleteSession, sessionID)
	return err
}

const getSession = `-- name: GetSession :one
SELECT session_id, user_id, created_at, expires_at FROM sessions
WHERE session_id = $1
`

func (q *Queries) GetSession(ctx context.Context, sessionID string) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSession, sessionID)
	var i Session
	err := row.Scan(
		&i.SessionID,
		&i.UserID,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}
